package crudgenerator

import (
	"bytes"
	"fmt"
	"go/format"
	"text/template"

	"github.com/herryg91/cdd/protoc-gen-cdd/descriptor"
	"github.com/herryg91/cdd/protoc-gen-cdd/generator"
	"google.golang.org/protobuf/compiler/protogen"
)

var (
	tmplEntityHeader = template.Must(template.New("entity-header").Parse(`
	// Code generated by protoc-gen-cdd. DO NOT EDIT.
	// source: {{.ProtoName}}

	package entity
	
	{{ if .IsImportTime }}
	import (
		"time"
	)
	{{ end }}
	`))

	tmplEntity = template.Must(template.New("entity").Parse(`
	type {{.GetName}} struct {
		{{- range $fext := .FieldExt}}
		{{$fext.GetName}} {{$fext.GetGoStandartType}} ` + "`" + `gorm:"{{$fext.GetGoTagAttribute}}"` + "`" + `
		{{- end}}
		
		{{if not .DBSchema.DisableTimestampTracking}}
		CreatedAt time.Time ` + "`" + `gorm:"column:created_at"` + "`" + `
		UpdatedAt time.Time ` + "`" + `gorm:"column:updated_at"` + "`" + `
		{{end}}
	}
	`))
)

func applyTemplateEntity(mexts []*descriptor.MessageDescriptorExt, packageName string, protoName string) (*generator.GeneratorResponseFile, error) {
	header, err := constructEntityHeader(mexts, protoName)
	if err != nil {
		return nil, err
	}

	body, err := constructEntityBody(mexts)
	if err != nil {
		return nil, err
	}

	formatted, err := format.Source([]byte(header + body))
	if err != nil {
		return nil, err
	}
	return &generator.GeneratorResponseFile{
		Filename:     "entity/" + packageName + ".cdd.go",
		Content:      string(formatted),
		GoImportPath: protogen.GoImportPath(""),
	}, nil
}

func constructEntityHeader(mexts []*descriptor.MessageDescriptorExt, protoName string) (string, error) {
	w := bytes.NewBuffer(nil)
	if err := tmplEntityHeader.Execute(w, struct {
		IsImportTime bool
		ProtoName    string
	}{
		isMessagesNeedImportTime(mexts),
		protoName,
	}); err != nil {
		return "", err
	}
	return w.String() + fmt.Sprintln() + fmt.Sprintln(), nil
}

func constructEntityBody(mexts []*descriptor.MessageDescriptorExt) (string, error) {
	body := ""
	for _, mext := range mexts {
		w := bytes.NewBuffer(nil)
		var tmplData = struct {
			*descriptor.MessageDescriptorExt
		}{
			mext,
		}

		if err := tmplEntity.Execute(w, tmplData); err != nil {
			return "", err
		}

		body += w.String() + fmt.Sprintln() + fmt.Sprintln()
	}
	return body, nil
}

package crudgenerator

import (
	"bytes"
	"go/format"
	"strings"
	"text/template"

	"github.com/herryg91/cdd/protoc-gen-cdd/descriptor"
	"github.com/herryg91/cdd/protoc-gen-cdd/generator"
	"github.com/iancoleman/strcase"
	"google.golang.org/protobuf/compiler/protogen"
)

var (
	tmplUseCaseErrors = template.Must(template.New("usecase-errors").Parse(`
	// Code generated by protoc-gen-cdd. DO NOT EDIT.
	// source: {{.FileExtension.GetName}}

	package {{.PackageName}}
	
	import "errors"

	var ErrDatabaseError = errors.New("Database Error")
	var ErrRecordNotFound = errors.New("Record Not Found")

	`))
)

func applyTemplateUseCaseErrors(mext *descriptor.MessageDescriptorExt) (*generator.GeneratorResponseFile, error) {
	w := bytes.NewBuffer(nil)

	packageName := strcase.ToKebab(strings.ToLower("crud-" + mext.DBSchema.TableName))
	var tmplData = struct {
		*descriptor.MessageDescriptorExt
		PackageName string
	}{
		mext,
		strings.Replace(packageName, "-", "_", -1),
	}

	if err := tmplUseCaseErrors.Execute(w, tmplData); err != nil {
		return nil, err
	}

	formatted, err := format.Source([]byte(w.String()))
	if err != nil {
		return nil, err
	}

	return &generator.GeneratorResponseFile{
		Filename:     "usecase/" + packageName + "/errors.cdd.go",
		Content:      string(formatted),
		GoImportPath: protogen.GoImportPath(""),
	}, nil
}

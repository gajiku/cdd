package crudgenerator

import (
	"bytes"
	"go/format"
	"strings"
	"text/template"

	"github.com/herryg91/cdd/protoc-gen-cdd/descriptor"
	"github.com/herryg91/cdd/protoc-gen-cdd/generator"
	"github.com/iancoleman/strcase"
	"google.golang.org/protobuf/compiler/protogen"
)

var (
	tmplUseCaseImpl = template.Must(template.New("usecase-impl").Funcs(template.FuncMap{
		"GetPrimaryKeyAsString": getPrimaryKeyAsString,
	}).Parse(`
	// Code generated by protoc-gen-cdd. DO NOT EDIT.
	// source: {{.FileExtension.GetName}}

	package {{.PackageName}}
	
	import (
		"fmt"
	
		"{{.PackagePath}}/entity"
		"github.com/jinzhu/gorm"
		_ "github.com/jinzhu/gorm/dialects/mysql"
	)
	
	type usecase struct {
		repo Repository
	}
	
	func NewUsecase(repo Repository) UseCase {
		return &usecase{
			repo: repo,
		}
	}

	func (uc *usecase) GetByPrimaryKey({{.GetPrimaryKeyAsString .FieldExt "" "" "," true true}}) (entity.{{.GetName}}, error) {
		resp, err := uc.repo.GetByPrimaryKey({{.GetPrimaryKeyAsString .FieldExt "" "" "," true false}})
		if err != nil {
			if gorm.IsRecordNotFoundError(err) {
				return entity.{{.GetName}}{}, fmt.Errorf("%w: %s", ErrRecordNotFound, err.Error())
			}
			return entity.{{.GetName}}{}, fmt.Errorf("%w: %s", ErrDatabaseError, err.Error())
		}
		return resp, nil
	}

	func (uc *usecase) GetAll() ([]entity.{{.GetName}}, error) {
		resp, err := uc.repo.GetAll()
		if err != nil{
			return []entity.{{.GetName}}{}, fmt.Errorf("%w: %s", ErrDatabaseError, err.Error())
		}
		return resp, nil
	}

	func (uc *usecase) Create(in entity.{{.GetName}}) (entity.{{.GetName}}, error) {
		resp, err := uc.repo.Create(in)
		if err != nil{
			return entity.{{.GetName}}{}, ErrDatabaseError
		}
		return resp, nil
	}

	
	func (uc *usecase) Update(in entity.{{.GetName}}) (entity.{{.GetName}}, error) {
		resp, err := uc.repo.Update(in)
		if err != nil{
			return entity.{{.GetName}}{}, fmt.Errorf("%w: %s", ErrDatabaseError, err.Error())
		}
		return resp, nil
	}
	
	func (uc *usecase) Delete({{.GetPrimaryKeyAsString .FieldExt "" "" "," true true}}) error {
		err := uc.repo.Delete({{.GetPrimaryKeyAsString .FieldExt "" "" "," true false}})
		if err != nil{
			return fmt.Errorf("%w: %s", ErrDatabaseError, err.Error())
		}
		return nil
	}
	`))
)

func applyTemplateUseCaseImpl(mext *descriptor.MessageDescriptorExt, pkgpath string) (*generator.GeneratorResponseFile, error) {
	w := bytes.NewBuffer(nil)

	packageName := strcase.ToKebab(strings.ToLower("crud-" + mext.DBSchema.TableName))
	var tmplData = struct {
		*descriptor.MessageDescriptorExt
		PackageName string
		PackagePath string
	}{
		mext,
		strings.Replace(packageName, "-", "_", -1),
		pkgpath,
	}

	if err := tmplUseCaseImpl.Execute(w, tmplData); err != nil {
		return nil, err
	}

	formatted, err := format.Source([]byte(w.String()))
	if err != nil {
		return nil, err
	}

	return &generator.GeneratorResponseFile{
		Filename:     "usecase/" + packageName + "/usecase-impl.cdd.go",
		Content:      string(formatted),
		GoImportPath: protogen.GoImportPath(""),
	}, nil
}

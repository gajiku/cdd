// Code generated by protoc-gen-cdd. DO NOT EDIT.
// source: city.proto
package crud_tbl_city

import (
	"fmt"
	tbl_city_ds "github.com/herryg91/cdd/examples/location-api/drivers/datasource/mysql/tbl_city"
	"github.com/herryg91/cdd/examples/location-api/entity"
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
)

type repository struct {
	db *gorm.DB
	ds *tbl_city_ds.MysqlDatasource
}

func NewRepository(db *gorm.DB, ds *tbl_city_ds.MysqlDatasource) Repository {
	return &repository{db, ds}
}
func (r *repository) GetByPrimaryKey(id int) (*entity.City, error) {
	out, err := r.ds.GetByPrimaryKey(id)
	if err != nil {
		if gorm.IsRecordNotFoundError(err) {
			return nil, ErrRecordNotFound
		}
		return nil, fmt.Errorf("%w: %s", ErrDatabaseError, err.Error())
	}
	return out.ToCityEntity(), err
}
func (r *repository) GetAll() ([]*entity.City, error) {
	datas, err := r.ds.GetAll()
	if err != nil {
		return nil, fmt.Errorf("%w: %s", ErrDatabaseError, err.Error())
	}
	out := []*entity.City{}
	for _, data := range datas {
		out = append(out, data.ToCityEntity())
	}
	return out, err
}
func (r *repository) Create(in entity.City) (*entity.City, error) {
	out, err := r.ds.Create(*tbl_city_ds.CityModel{}.FromCityEntity(in))
	if err != nil {
		return nil, fmt.Errorf("%w: %s", ErrDatabaseError, err.Error())
	}
	return out.ToCityEntity(), err
}
func (r *repository) Update(in entity.City) (*entity.City, error) {
	out, err := r.ds.Update(*tbl_city_ds.CityModel{}.FromCityEntity(in))
	if err != nil {
		return nil, fmt.Errorf("%w: %s", ErrDatabaseError, err.Error())
	}
	return out.ToCityEntity(), err
}
func (r *repository) Delete(id int) error {
	err := r.ds.Delete(id)
	if err != nil {
		return fmt.Errorf("%w: %s", ErrDatabaseError, err.Error())
	}
	return err
}

/*
	// Add this in drivers/datasource/mysql/tbl_city/{any_file}.go

	func (model *CityModel) ToCityEntity() *entity.City {
		return &entity.City{
			Id:model.Id,
			ProvinceId:model.ProvinceId,
			Name:model.Name,
		}
	}
	func (CityModel) FromCityEntity(in entity.City) *CityModel {
		return &CityModel{
			Id:in.Id,
			ProvinceId:in.ProvinceId,
			Name:in.Name,
		}
	}
*/

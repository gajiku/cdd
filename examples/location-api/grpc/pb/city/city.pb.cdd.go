// Code generated by protoc-gen-cdd. DO NOT EDIT.
// source: city.proto
package city

import (
	"net/http"
	"strings"

	"github.com/herryg91/cdd/grst"
	grst_errors "github.com/herryg91/cdd/grst/errors"
	"google.golang.org/grpc"

	"github.com/mcuadros/go-defaults"
	"google.golang.org/grpc/codes"
	"gopkg.in/validator.v2"
)

type fullMethods struct {
	City_Get    string
	City_Search string
}

var FullMethods = fullMethods{
	City_Get:    "/city.city/Get",
	City_Search: "/city.city/Search",
}

var NeedAuthFullMethods = []string{}

func ValidateRequest(req interface{}) error {
	defaults.SetDefaults(req)
	if errs := validator.Validate(req); errs != nil {
		validateError := []*grst_errors.ErrorDetail{}
		for field, err := range errs.(validator.ErrorMap) {
			errMessage := strings.Replace(err.Error(), "{field}", field, -1)
			validateError = append(validateError, &grst_errors.ErrorDetail{Code: 999, Field: field, Message: errMessage})
		}
		return grst_errors.New(http.StatusBadRequest, codes.InvalidArgument, 999, "Validation Error", validateError...)
	}

	return nil
}

/*==================== City Section ====================*/

func RegisterCityGrstServer(grpcRestServer *grst.Server, hndl CityServer) {

	forward_City_Get_0 = grpcRestServer.GetForwardResponseMessage()

	forward_City_Search_0 = grpcRestServer.GetForwardResponseMessage()

	RegisterCityServer(grpcRestServer.GetGrpcServer(), hndl)
	grpcRestServer.RegisterRestHandler(RegisterCityHandler)
}

func NewCityGrstClient(serverHost string) (CityClient, error) {
	opts := []grpc.DialOption{}
	opts = append(opts, grpc.WithMaxMsgSize(1024*1024*20))
	// opts = append(opts, grpc.WithTransportCredentials(creds))
	opts = append(opts, grpc.WithInsecure())
	grpcConn, err := grpc.Dial(serverHost, opts...)
	return NewCityClient(grpcConn), err
}
